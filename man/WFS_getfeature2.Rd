% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/WFS_getfeature2.R
\name{WFS_getfeature2}
\alias{WFS_getfeature2}
\title{Retrieve WFS information with the GetFeature_POST request}
\usage{
WFS_getfeature2(
  typename,
  ...,
  url = WFS_get_url(),
  version = WFS_get_version(),
  debug = F,
  sfverbose = F,
  httrverbose = rep(F, 4)
)
}
\arguments{
\item{typename}{Character with the name of a feature (such as e.g. found by using \code{\link[=WFS_featuretypes]{WFS_featuretypes()}} )}

\item{...}{optional arguments for the \code{GetFeature} request. See \strong{Details}}

\item{url}{URL of the WFS service. See \code{\link[=WFS_get_url]{WFS_get_url()}} for the default}

\item{version}{software version for WFS service request. See \code{\link[=WFS_get_version]{WFS_get_version()}} for the default}

\item{debug}{Logical indicating the httr response is to be returned}

\item{sfverbose}{Logical indicating if \code{\link[sf:st_read]{sf::read_sf()}} messages will be displayed}

\item{httrverbose}{Logical vector of up to four entries to be used in \code{\link[httr:verbose]{httr::verbose()}}}
}
\value{
a \code{sf} object with the requested information (the 'id' variable and the geometry will always be included)
or a character string with an error message
}
\description{
TODO will be integrated with WFS_getfeature.
Retrieve the requested information.
}
\details{
Arguments that are recognized by the GetFeature request are:
\itemize{
\item \code{bbox        } (not in combination with \code{cql_filter} or \code{filter})
\item \code{cql_filter  }
\item \code{filter      }
\item \code{resultType} - default 'results' and alternative 'hits'. In the latter case only the number of matched features (\code{numbeOfFeatures} in 1.1.0 or \code{numberMatched} in 2.0.0) is returned
\item \code{srsname     } indicate the crs for the coordinates of the output e.g. \code{srsname='EPSG:4326'}
\item \code{propertyname} the name of the fields to retrieve. The \code{id} and \code{geometry} fields will always be included.
\item \code{startIndex  } number of features to skip before retrieving features ( the output with \code{startindex=1} will start with the second feature )
\item \code{maxfeatures } (version \verb{1.1.0}) or \code{count} (version \verb{2.0.0}) indicates the number of features to retrieve. When the wrong argument is specified it will be translated in the other.
The \code{GetFeature} argument \code{outputFormat} has value 'application/json' but this can be overwritten
}
}
\examples{
\dontrun{
typename <- 'topp:gidw_groenbomen'
wfs1 = WFS_getfeature(typename)
wfs2 = WFS_getfeature(typename,
   cql_filter= r"(boom_omschrijf='Prunus serrulata ''Kanzan''')" ) # double internal quotes !
wfs3 = WFS_getfeature(typename,
   bbox = '119038,479244,119500,479500') # in EPSG:28992  (default see WFS_featuretypes)
wfs3a = WFS_getfeature(typename,
  cql_filter= r"( bbox(geometrie,119038,479244,119500,479500,'EPSG:28992') and (boom_omschrijf='Acer freemanii ''Elegant'''))")
wfs3b = WFS_getfeature(typename,
  cql_filter= r"( bbox(geometrie,119038,479244,119500,479500,'EPSG:28992'))")
wfs4 = WFS_getfeature(typename,
   bbox = '119038,479244,119500,479500,EPSG:28992',  # in EPSG:28992
   srsname = 'EPSG:4326') # but request coordinates in  WGS84 (EPSG:4326)
f5 = fg("Filter"
, fg(
  "PropertyIsEqualTo"
  , bg('PropertyName', 'topp:boom_omschrijf')
  , bg('Literal',  r"(Acer freemanii 'Elegant')" )#'
  )
)
f5
wfs5 = WFS_getfeature(typename,
   srsname = 'EPSG:4326', # but request coordinates in  WGS84 (EPSG:4326)
   filter  = f5)
}
}
